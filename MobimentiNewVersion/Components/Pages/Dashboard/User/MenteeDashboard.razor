@page "/mentee-dashboard/{token}"

@using MobimentiNewVersion.Business.Abstract
@using MobimentiNewVersion.Business.Concrete
@using System.IdentityModel.Tokens.Jwt
@using MobimentiNewVersion.Components.Layout
@using MobimentiNewVersion.Entity.Concrete
@using System.Globalization

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider;
@inject IAuthenticateService _authService;
@inject IUserService _userService;
@inject IMentorService _mentorService
@inject ISaleService _saleService;
@inject IPackageService _packageService;
@inject IAppointmentService _appointmentService;
@inject IJSRuntime JS

<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
	<UserDashboardSidebarLayout />
	<RadzenBody>
		<RadzenStack>
			<RadzenStack><RadzenText TextStyle="TextStyle.DisplayH4">Hoşgeldin @user.FirstName,</RadzenText></RadzenStack>

			@* User Cards *@
			<RadzenStack>
				<RadzenCardGroup Responsive="true" >
				@* User Cards/Randevu Oluştur *@
				<RadzenCard Variant="Variant.Filled" Style="display:flex; align-items:center; gap:10px; cursor:pointer">
					<RadzenColumn Size="5"><RadzenImage Path="icons/CreateAppointmentIcon.png" Style="width:50px" /></RadzenColumn>
					<RadzenColumn Size="7"><RadzenText TextStyle="TextStyle.Subtitle1">Randevu Oluştur</RadzenText></RadzenColumn>
				</RadzenCard>
				@* User Cards/Toplam Görüşme *@
				<RadzenCard Variant="Variant.Filled" Style="display:flex; align-items:center; gap:10px;">
					<RadzenColumn><RadzenImage Path="icons/TotalMeetingsIcon.svg" Style="width:50px" /></RadzenColumn>
					<RadzenColumn>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.Subtitle1">Toplam Görüşme</RadzenText>
						</RadzenRow>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.H5">0</RadzenText>
						</RadzenRow>
					</RadzenColumn>
				</RadzenCard>
				@* User Cards/Planlanmış Görüşme *@
				<RadzenCard Variant="Variant.Filled" Style="display:flex; align-items:center; gap:10px;">
					<RadzenColumn><RadzenImage Path="icons/ScheduledMeetingsIcon.png" Style="width:50px" /></RadzenColumn>
					<RadzenColumn>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.Subtitle2">Planlanmış Görüşme</RadzenText>
						</RadzenRow>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.H5">0</RadzenText>
						</RadzenRow>
					</RadzenColumn>
				</RadzenCard>
				@* User Cards/Licence *@
				<RadzenCard Variant="Variant.Filled" Style="display:flex; align-items:center; gap:10px;">
					<RadzenColumn><RadzenImage Path="icons/LicencePriceIcon.png" Style="width:50px" /></RadzenColumn>
					<RadzenColumn>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.Subtitle2">Paket Türü</RadzenText>
						</RadzenRow>
						<RadzenRow>
							<RadzenText TextStyle="TextStyle.H5">Free</RadzenText>
						</RadzenRow>
					</RadzenColumn>
				</RadzenCard>
			</RadzenCardGroup>
			</RadzenStack>

			@* Dashboard Middle Section *@
			<RadzenRow Gap="20px">
				@* Last Sales *@
				<RadzenColumn Size="12" SizeMD="6">
					<RadzenCard Style="display:flex;flex-direction:column;gap:10px; min-height:300px">
						<RadzenRow AlignItems="AlignItems.Center" Style="margin-bottom:1rem">
							<RadzenColumn>
								<RadzenRow AlignItems="AlignItems.Center">
									<RadzenIcon Icon="payments" /><RadzenText Style="margin-bottom:0!important" TextStyle="TextStyle.DisplayH5">Son Harcamalar</RadzenText>
								</RadzenRow>
							</RadzenColumn>
							<RadzenColumn Style="display:flex; justify-content:flex-end">
								<RadzenButton Text="Tüm Harcamaları Gör" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Size="ButtonSize.ExtraSmall" />
							</RadzenColumn>
						</RadzenRow>
						<RadzenDataList Style="overflow:auto;"
										WrapItems="true" AllowPaging="true"
										Data="@saleTemplates" TItem="ShowSaleTemplate" PageSize="5"
										PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
							<Template Context="sale">
								<RadzenCard Variant="Variant.Outlined" class="rz-p-0" Style="width: 100%; overflow: hidden;">
									<RadzenRow Gap="0">
										<RadzenColumn Size="12" SizeLG="3" class="rz-p-4 product-title">
											<RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5" class="rz-color-on-secondary-lighter">@(sale.PackageName)</RadzenText>
										</RadzenColumn>
										<RadzenColumn Size="12" SizeLG="7" class="rz-p-4" Style="display:flex; align-items:center; justify-content:space-around; width:100%">
											<RadzenRow Gap="20">
												<RadzenColumn Size="12" SizeSM="10" Style="display:flex; align-items:center">
													<RadzenText TextStyle="TextStyle.Body1" TagName="TagName.H5" class="rz-mb-0">@(sale.SaleDate)</RadzenText>
												</RadzenColumn>
												<RadzenColumn Size="12" SizeSM="2" class="rz-text-align-start rz-text-align-lg-end">
													<RadzenBadge Style="font-size:22px; padding:1rem" BadgeStyle="BadgeStyle.Secondary" Shade="Shade.Lighter" class="price-badge" Text="@(sale.Price)" />
												</RadzenColumn>
											</RadzenRow>
										</RadzenColumn>
									</RadzenRow>
								</RadzenCard>
							</Template>
						</RadzenDataList>
					</RadzenCard>
				</RadzenColumn>
				@* Event Column *@
				<RadzenColumn Size="12" SizeMD="6">
					<RadzenCard Style="display:flex;flex-direction:column;gap:10px;min-height:300px">
						<RadzenRow AlignItems="AlignItems.Center" Style="margin-bottom:1rem">
							<RadzenColumn>
								<RadzenRow AlignItems="AlignItems.Center">
									<RadzenIcon Icon="event" /><RadzenText Style="margin-bottom:0!important" TextStyle="TextStyle.DisplayH5">Görüşmeler</RadzenText>
								</RadzenRow>
							</RadzenColumn>
							<RadzenColumn Style="display:flex; justify-content:flex-end">
								<RadzenButton Text="Tüm Randevuları Gör" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text" Size="ButtonSize.ExtraSmall" />
							</RadzenColumn>
						</RadzenRow>
						<RadzenDataList Style="overflow:auto;"
										WrapItems="true" AllowPaging="true"
										Data="@appoitmentTemplates" TItem="ShowAppoitmentTemplate" PageSize="5"
										PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
							<Template Context="appointment">
								@if (DateTime.TryParse(appointment.StartDate, out DateTime parsedDate) && parsedDate > DateTime.Now)
								{
									<RadzenCard Variant="Variant.Outlined" class="rz-p-4" Style="width: 100%; overflow: hidden;">
										<RadzenRow>
											<RadzenColumn Size="1" Style="display:flex; align-items:center; justify-content:center"><RadzenIcon Icon="calendar_month" /></RadzenColumn>
											<RadzenColumn Size="11">
												<RadzenRow><RadzenText TextStyle="TextStyle.Body1"><strong>Görüşme: @appointment.MentorName</strong></RadzenText></RadzenRow>
												<RadzenRow><RadzenText TextStyle="TextStyle.Body2">@appointment.StartDate, @appointment.StartHour-@appointment.EndHour</RadzenText></RadzenRow>
											</RadzenColumn>
										</RadzenRow>
									</RadzenCard>
								}
							</Template>
						</RadzenDataList>
					</RadzenCard>
				</RadzenColumn>
			</RadzenRow>
		</RadzenStack>
	</RadzenBody>
</RadzenLayout>

@code {
	[Parameter]
	public string Token { get; set; }

	private string userId;
	User user = new User();
	IEnumerable<Sale> sales = new List<Sale>();
	List<ShowSaleTemplate> saleTemplates = new List<ShowSaleTemplate>();
	List<Appointment> appointments = new List<Appointment>();
	List<ShowAppoitmentTemplate> appoitmentTemplates = new List<ShowAppoitmentTemplate>();

	private class ShowSaleTemplate()
	{
		public string PackageName { get; set; }
		public string SaleDate { get; set; }
		public string Price { get; set; }
	}

	private class ShowAppoitmentTemplate()
	{
		public string MentorName { get; set; }
		public string StartDate { get; set; }
		public string StartHour { get; set; }
		public string EndHour { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrWhiteSpace(Token))
		{
			// Token boş, yönlendir veya hata göster
			Navigation.NavigateTo("/user-login");
			return;
		}

		var handler = new JwtSecurityTokenHandler();
		var jwtToken = handler.ReadJwtToken(Token);
		userId = jwtToken.Claims.First(claim => claim.Type == "nameid").Value.ToString();
		user = _userService.GetById(Convert.ToInt32(userId));

		sales = _saleService.GetAll(x => x.UserId == user.Id);
		appointments = _appointmentService.GetAll(x => x.UserId == user.Id);

		if (sales.Any())
		{
			foreach (var sale in sales)
			{
				Package package = _packageService.GetById(sale.PackageId);

				var packageName = package.PackageName;
				var price = package.Price;
				var saleDate = sale.SaleDate.Date.ToString("dd MMM yyyy", CultureInfo.InvariantCulture);

				ShowSaleTemplate showSaleTemplate = new ShowSaleTemplate
					{
						PackageName = packageName,
						SaleDate = saleDate,
						Price = price.ToString() + "₺"
					};

				saleTemplates.Add(showSaleTemplate);

			}
		}

		if (appointments.Any())
		{
			foreach (var appointment in appointments)
			{
				var mentor = _mentorService.GetById(appointment.MentorId);
				var startDate = appointment.AppointmentDate.Date.ToString("dd MMM yyyy, dddd", CultureInfo.InvariantCulture);
				var startHour = appointment.AppointmentDate.Hour.ToString() + "." + appointment.AppointmentDate.Minute.ToString();
				var endHour = appointment.AppointmentDate.AddHours(1).Hour.ToString() + "." + appointment.AppointmentDate.Minute.ToString();

				var mentorName = mentor.FirstName + " " + mentor.LastName;

				ShowAppoitmentTemplate showAppoitmentTemplate = new ShowAppoitmentTemplate
					{
						MentorName = mentorName,
						StartDate = startDate,
						StartHour = startHour,
						EndHour = endHour
					};

				appoitmentTemplates.Add(showAppoitmentTemplate);
			}
		}
	}



	private async Task Logout()
	{
		if (AuthStateProvider is CustomAuthenticationStateProvider customAuthProvider)
		{
			customAuthProvider.MarkUserAsLoggedOut();
		}
		await JS.InvokeVoidAsync("localStorage.removeItem", "accessToken");
		Navigation.NavigateTo("/user-login");
	}
}
