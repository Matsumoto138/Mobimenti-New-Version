@page "/mentee-dashboard/{token}"

@using MobimentiNewVersion.Business.Abstract
@using MobimentiNewVersion.Business.Concrete
@using System.IdentityModel.Tokens.Jwt
@using MobimentiNewVersion.Components.Layout
@using MobimentiNewVersion.Entity.Concrete

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider;
@inject IAuthenticateService _authService;
@inject IUserService _userService;
@inject IJSRuntime JS

<RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
	<UserDashboardSidebarLayout />
	<RadzenBody>
		<RadzenStack><RadzenText>Hoşgeldin @user.FirstName,</RadzenText></RadzenStack>

		@* User Cards *@

	</RadzenBody>
</RadzenLayout>

@code {
	[Parameter]
	public string Token { get; set; }

	private string userId;
	User user = new User();

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrWhiteSpace(Token))
		{
			// Token boş, yönlendir veya hata göster
			Navigation.NavigateTo("/user-login");
			return;
		}

		var handler = new JwtSecurityTokenHandler();
		var jwtToken = handler.ReadJwtToken(Token);
		userId = jwtToken.Claims.First(claim => claim.Type == "nameid").Value;
		user = _userService.GetById(Convert.ToInt32(userId));
	}



	private async Task Logout()
	{
		if (AuthStateProvider is CustomAuthenticationStateProvider customAuthProvider)
		{
			customAuthProvider.MarkUserAsLoggedOut();
		}
		await JS.InvokeVoidAsync("localStorage.removeItem", "accessToken");
		Navigation.NavigateTo("/user-login");
	}
}
